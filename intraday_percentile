import blpapi
from datetime import date,datetime,timedelta

BAR_DATA = blpapi.Name("barData")
BAR_TICK_DATA = blpapi.Name("barTickData")
OPEN = blpapi.Name("open")
HIGH = blpapi.Name("high")
LOW = blpapi.Name("low")
CLOSE = blpapi.Name("close")
VOLUME = blpapi.Name("volume")
NUM_EVENTS = blpapi.Name("numEvents")
TIME = blpapi.Name("time")
RESPONSE_ERROR = blpapi.Name("responseError")
SESSION_TERMINATED = blpapi.Name("SessionTerminated")
CATEGORY = blpapi.Name("category")
MESSAGE = blpapi.Name("message")
SECURITY = blpapi.Name("security")
SECURITY_DATA = blpapi.Name("securityData")
FIELD_DATA = blpapi.Name("fieldData")

class bbgRequest():

    def __init__(self):

        sessionOptions = blpapi.SessionOptions()
        sessionOptions.setServerHost("localhost")
        sessionOptions.setServerPort(8194)

        #storage for results
        self.intradayBarResults=[]
        self.intradayBarColumns=['security','time', 'open', 'high', 'low', 'close','numEvents', 'volume']
        self.referenceDataResults=[]
        self.referenceDataColumns=['security','field', 'value']

        # Create a Session
        self.session = blpapi.Session(sessionOptions)

        # Start a Session
        if not self.session.start():
            print("Failed to start session.")
            return

        try:
            # Open service to get historical data from
            if not self.session.openService("//blp/refdata"):
                print("Failed to open //blp/refdata")
                return

            self.refDataService = self.session.getService("//blp/refdata")

        except:
            print("Failed to get service")
            return

    def __del__(self):

        self.session.stop()
        
    def clearReferenceResult(self):
        self.referenceDataResults=[]
        
    def clearIntradayBarResult(self):
        self.intradayBarResults=[]

    def printErrorInfo(self,leadingStr, errorInfo):
        print("%s%s (%s)" % (leadingStr, errorInfo.getElementAsString(CATEGORY),
                             errorInfo.getElementAsString(MESSAGE)))
    
    def processIntradayBarResponseEvent(self,event,sid):
        for msg in event:
            if msg.hasElement(RESPONSE_ERROR):
                printErrorInfo("REQUEST FAILED: ", msg.getElement(RESPONSE_ERROR))
                continue
                
            data = msg.getElement(BAR_DATA).getElement(BAR_TICK_DATA)

            for bar in data.values():
                time = bar.getElementAsDatetime(TIME)
                open = bar.getElementAsFloat(OPEN)
                high = bar.getElementAsFloat(HIGH)
                low = bar.getElementAsFloat(LOW)
                close = bar.getElementAsFloat(CLOSE)
                numEvents = bar.getElementAsInteger(NUM_EVENTS)
                volume = bar.getElementAsInteger(VOLUME)
                self.intradayBarResults.append([sid,time, open, high, low, close,numEvents, volume])

    def processSecurity(self,sid):

        self.intradayBarRequest.set("security",sid)
        #print("Sending Request:", self.intradayBarRequest.getElement(SECURITY).getValue())
        self.session.sendRequest(self.intradayBarRequest)

        done = False
        while not done:
            # nextEvent() method below is called with a timeout to let
            # the program catch Ctrl-C between arrivals of new events
            event = self.session.nextEvent(500)
            
            if event.eventType() == blpapi.Event.PARTIAL_RESPONSE:
                #print("Processing Partial Response")
                self.processIntradayBarResponseEvent(event,sid)
            elif event.eventType() == blpapi.Event.RESPONSE:
                #print("Processing Response")
                self.processIntradayBarResponseEvent(event,sid)
                done = True
            else:
                for msg in event:
                    if event.eventType() == blpapi.Event.SESSION_STATUS:
                        if msg.messageType() == SESSION_TERMINATED:
                            done = True
        
    def sendIntradayBarRequest(self,sids,start=date.today(), end=datetime.today()+timedelta(days=1), event='TRADE', interval=1):

        """
        Parameters
        ----------
        start : times are in GMT.
        end   : times are in GMT.
        events: [TRADE, BID, ASK, BID_BEST, ASK_BEST, BEST_BID, BEST_ASK]
        interval: int, between 1 and 1440 in minutes. If omitted, defaults to 1 minute
        """

        self.intradayBarRequest = self.refDataService.createRequest("IntradayBarRequest")

        self.intradayBarRequest.set('eventType', event)
        self.intradayBarRequest.set('startDateTime', start)
        self.intradayBarRequest.set('endDateTime', end)
        self.intradayBarRequest.set('interval', interval)
                      
        # Open service to get historical data from
        if isinstance(sids,str):
            self.processSecurity(sids)

        else:
            if hasattr(sids, "__iter__"):
                for s in sids:
                    self.processSecurity(s)
        
    def processReferenceDataResponseEvent(self,event):
        for msg in event:
            if msg.hasElement(RESPONSE_ERROR):
                printErrorInfo("REQUEST FAILED: ", msg.getElement(RESPONSE_ERROR))
                continue
                        
            securities=msg.getElement('securityData')
            for s in securities.values():
                ticker=s.getElementValue('security')
                field_data=s.getElement('fieldData')
                for f in self.referenceDataFields:
                    field_value=[]
                    if field_data.hasElement(f):
                        
                        for v in field_data.getElement(f).values():
                                                    
                            if isinstance(v,blpapi.element.Element):
                                for e in v.elements():
                                    for v2 in v.getElement(e.name()).values():
                                        field_value.append(v2)
                            else:
                                field_value.append(v)
                                
                        if len(field_value)==1:
                            field_value=field_value[0]
                        
                    else:
                        field_value='NA'
                        
                    self.referenceDataResults.append([ticker,f,field_value])
            
    def referenceDataEventLoop(self):

        done = False
        while not done:
            # nextEvent() method below is called with a timeout to let
            # the program catch Ctrl-C between arrivals of new events
            event = self.session.nextEvent(500)
            
            if event.eventType() == blpapi.Event.PARTIAL_RESPONSE:
                #print("Processing Partial Response")
                self.processReferenceDataResponseEvent(event)
            elif event.eventType() == blpapi.Event.RESPONSE:
                #print("Processing Response")
                self.processReferenceDataResponseEvent(event)
                done = True
            else:
                for msg in event:
                    if event.eventType() == blpapi.Event.SESSION_STATUS:
                        if msg.messageType() == SESSION_TERMINATED:
                            done = True

    def sendReferenceDataRequest(self,sids,fields):

        """
        Parameters
        ----------
        sids  : bbg security identifier(s)
        fields: bbg field name(s)
        """
        
        if isinstance(sids,str):
            sids=[sids]
        if isinstance(fields,str):
            fields=[fields]
            
        self.referenceDataFields=fields
        self.referenceDataRequest = self.refDataService.createRequest("ReferenceDataRequest")

        for item_name,item_value in zip(["securities","fields"],[sids,fields]):
            for v in item_value:
                self.referenceDataRequest.append(item_name,v)

        self.session.sendRequest(self.referenceDataRequest)
        self.referenceDataEventLoop()
        
from bqwidgets import DatePicker,NameValueTable
import ipywidgets as widgets
from IPython.display import display
import bqviz as bqv
import pandas as pd
from datetime import date,datetime,timedelta
from bqviz.base_plots import VBox,HBox,LinePlot,BB_CLRS,Layout,BQV_LAYOUTS


fields_for_percentile=['PX_TO_BOOK_RATIO','CUR_MKT_CAP','CURRENT_TRR_1MO','CURRENT_TRR_3MO']

date_to=pd.Timestamp.today().strftime('%m-%d-%Y')
date_from=(pd.Timestamp.today() - pd.Timedelta('100 days')).strftime('%m-%d-%Y')
date_picker=DatePicker(max_date=date_to,min_date=date_from)
button_run = widgets.Button(description='Load Bloomberg Data')
button_chart = widgets.Button(description='Update the charts without data loading.')
button_chart.layout.width = '300px'
note=widgets.Label('It takes abount two minutes.\t')

radio_btns = NameValueTable(data=[{'name':n} for n in range(2,6)], title='n-quantiles', selection_type='single')
radio_btns.selected_data=['4']
button_box=widgets.HBox([ button_run , note ])
date_and_button = widgets.VBox([date_picker , button_box])
date_and_button.layout.width = '800px'
header_box = widgets.HBox([date_and_button ,  radio_btns ])
chart_box = widgets.HBox([])
chart_box.layout.width = '1200px'
main_box = widgets.VBox([header_box,button_chart,chart_box])

my_bbg=bbgRequest()


def describe_chart(my_bbg):
    
    #クラスからデータ取り出し
    prices=pd.DataFrame(my_bbg.intradayBarResults,columns=my_bbg.intradayBarColumns)
    ref_data=pd.DataFrame(my_bbg.referenceDataResults,columns=my_bbg.referenceDataColumns)
    
    #棒チャート用
    grouped=prices.groupby('security')
    daily_rtn=(grouped.last().close/grouped.first().open-1)*100
    
    #pivot tableにして加工
    open_price=pd.pivot_table(prices,'open','time','security', aggfunc=min)
    close_price=pd.pivot_table(prices,'close','time','security', aggfunc=min)
    last=close_price.iloc[-1]
    open_price.loc[last.name+timedelta(minutes=1)]=last    
    open_price.index+=timedelta(hours=9)
    intraday_rtn=(open_price/open_price.shift(1)-1).fillna(0)

    #分位分析用    
    num_of_quantiles=int(radio_btns.selected_data[0])
    quantiles=[]
    for f in fields_for_percentile:
        slice=ref_data.loc[ref_data.field==f].copy()
        slice.index=slice.security
        quantiles.append(pd.qcut(slice.value,num_of_quantiles,labels=False))

    quantiles=pd.concat(quantiles,axis=1)
    quantiles.columns=fields_for_percentile
    quantiles['rtn']=daily_rtn
    
    port_daily_rtns=[]
    port_intraday_rtns=[]
    for f in fields_for_percentile:
        
        port_daily_rtns.append(quantiles.groupby(f).rtn.mean())

        high=intraday_rtn.loc[:,quantiles.loc[quantiles[f]==(num_of_quantiles-1)].index].mean(axis=1)
        low=intraday_rtn.loc[:,quantiles.loc[quantiles[f]==0].index].mean(axis=1)
        port_intraday_rtns.append(high-low)

    df_for_bar=pd.concat(port_daily_rtns,axis=1)
    df_for_bar.columns=fields_for_percentile
    df_for_bar.index=[str(i) for i in df_for_bar.index]
    df_for_line=pd.concat(port_intraday_rtns,axis=1)
    df_for_line.columns=fields_for_percentile

    bar_chart=bqv.GridPlot(df_for_bar, plots=bqv.BarPlot,cols=1).show()
    bar_chart.layout.width = '400px'
    line_chart=bqv.GridPlot(df_for_line.cumsum()*100, cols=1).show()
    line_chart.layout.width = '800px'
    chart_box.children =[bar_chart,line_chart]
    
def button_chart_on_click(_):
    
    try:
        describe_chart(my_bbg)
    except:
        pass
    
def button_run_on_click(_):
    
    #表示
    note.value='Loading data from bloomberg...'
    
    #メンバーの取得
    my_bbg.sendReferenceDataRequest('TPX500 Index','indx_members')
    tpx500=[e + ' Equity' for e in my_bbg.referenceDataResults[-1][-1]]
    my_bbg.clearReferenceResult()
    
    #属性
    my_bbg.sendReferenceDataRequest(tpx500,fields=fields_for_percentile)
    
    #Intraday
    start_time=datetime.now()
    my_bbg.sendIntradayBarRequest(tpx500,
                                  start=pd.Timestamp(date_picker.value),
                                  end=pd.Timestamp(date_picker.value + ' 15:10:00'),
                                  interval=1)
            
    note.value='This Data was updated at '+datetime.now().strftime('%H:%M:%S')
    
    describe_chart(my_bbg)
    
# Update all data, charts, and the data grid when a users clicks the Run button
button_run.on_click(button_run_on_click)
button_chart.on_click(button_chart_on_click)

display(main_box)
